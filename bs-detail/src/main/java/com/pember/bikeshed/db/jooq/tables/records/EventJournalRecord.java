/*
 * This file is generated by jOOQ.
 */
package com.pember.bikeshed.db.jooq.tables.records;


import com.pember.bikeshed.db.jooq.tables.EventJournal;

import java.time.OffsetDateTime;

import org.jooq.JSONB;
import org.jooq.Record2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EventJournalRecord extends UpdatableRecordImpl<EventJournalRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.event_journal.entity_id</code>.
     */
    public EventJournalRecord setEntityId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.event_journal.entity_id</code>.
     */
    public String getEntityId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.event_journal.revision</code>.
     */
    public EventJournalRecord setRevision(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.event_journal.revision</code>.
     */
    public Integer getRevision() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.event_journal.source</code>.
     */
    public EventJournalRecord setSource(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.event_journal.source</code>.
     */
    public String getSource() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.event_journal.event_type</code>.
     */
    public EventJournalRecord setEventType(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.event_journal.event_type</code>.
     */
    public String getEventType() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.event_journal.time_occurred</code>.
     */
    public EventJournalRecord setTimeOccurred(OffsetDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.event_journal.time_occurred</code>.
     */
    public OffsetDateTime getTimeOccurred() {
        return (OffsetDateTime) get(4);
    }

    /**
     * Setter for <code>public.event_journal.time_observed</code>.
     */
    public EventJournalRecord setTimeObserved(OffsetDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.event_journal.time_observed</code>.
     */
    public OffsetDateTime getTimeObserved() {
        return (OffsetDateTime) get(5);
    }

    /**
     * Setter for <code>public.event_journal.data</code>.
     */
    public EventJournalRecord setData(JSONB value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.event_journal.data</code>.
     */
    public JSONB getData() {
        return (JSONB) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<String, Integer> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached EventJournalRecord
     */
    public EventJournalRecord() {
        super(EventJournal.EVENT_JOURNAL);
    }

    /**
     * Create a detached, initialised EventJournalRecord
     */
    public EventJournalRecord(String entityId, Integer revision, String source, String eventType, OffsetDateTime timeOccurred, OffsetDateTime timeObserved, JSONB data) {
        super(EventJournal.EVENT_JOURNAL);

        setEntityId(entityId);
        setRevision(revision);
        setSource(source);
        setEventType(eventType);
        setTimeOccurred(timeOccurred);
        setTimeObserved(timeObserved);
        setData(data);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised EventJournalRecord
     */
    public EventJournalRecord(com.pember.bikeshed.db.jooq.tables.pojos.EventJournal value) {
        super(EventJournal.EVENT_JOURNAL);

        if (value != null) {
            setEntityId(value.getEntityId());
            setRevision(value.getRevision());
            setSource(value.getSource());
            setEventType(value.getEventType());
            setTimeOccurred(value.getTimeOccurred());
            setTimeObserved(value.getTimeObserved());
            setData(value.getData());
            resetChangedOnNotNull();
        }
    }
}
