/*
 * This file is generated by jOOQ.
 */
package com.pember.bikeshed.db.jooq.tables;


import com.pember.bikeshed.db.jooq.Indexes;
import com.pember.bikeshed.db.jooq.Keys;
import com.pember.bikeshed.db.jooq.Public;
import com.pember.bikeshed.db.jooq.tables.records.EventJournalRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EventJournal extends TableImpl<EventJournalRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.event_journal</code>
     */
    public static final EventJournal EVENT_JOURNAL = new EventJournal();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventJournalRecord> getRecordType() {
        return EventJournalRecord.class;
    }

    /**
     * The column <code>public.event_journal.entity_id</code>.
     */
    public final TableField<EventJournalRecord, String> ENTITY_ID = createField(DSL.name("entity_id"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>public.event_journal.revision</code>.
     */
    public final TableField<EventJournalRecord, Integer> REVISION = createField(DSL.name("revision"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.event_journal.source</code>.
     */
    public final TableField<EventJournalRecord, String> SOURCE = createField(DSL.name("source"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.event_journal.event_type</code>.
     */
    public final TableField<EventJournalRecord, String> EVENT_TYPE = createField(DSL.name("event_type"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>public.event_journal.time_occurred</code>.
     */
    public final TableField<EventJournalRecord, OffsetDateTime> TIME_OCCURRED = createField(DSL.name("time_occurred"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.event_journal.time_observed</code>.
     */
    public final TableField<EventJournalRecord, OffsetDateTime> TIME_OBSERVED = createField(DSL.name("time_observed"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.event_journal.data</code>.
     */
    public final TableField<EventJournalRecord, JSONB> DATA = createField(DSL.name("data"), SQLDataType.JSONB.nullable(false), this, "");

    private EventJournal(Name alias, Table<EventJournalRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private EventJournal(Name alias, Table<EventJournalRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.event_journal</code> table reference
     */
    public EventJournal(String alias) {
        this(DSL.name(alias), EVENT_JOURNAL);
    }

    /**
     * Create an aliased <code>public.event_journal</code> table reference
     */
    public EventJournal(Name alias) {
        this(alias, EVENT_JOURNAL);
    }

    /**
     * Create a <code>public.event_journal</code> table reference
     */
    public EventJournal() {
        this(DSL.name("event_journal"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.EJ_OBSERVED, Indexes.EJ_OCCURRED, Indexes.EJ_TYPE);
    }

    @Override
    public UniqueKey<EventJournalRecord> getPrimaryKey() {
        return Keys.EVENT_JOURNAL_PKEY;
    }

    @Override
    public EventJournal as(String alias) {
        return new EventJournal(DSL.name(alias), this);
    }

    @Override
    public EventJournal as(Name alias) {
        return new EventJournal(alias, this);
    }

    @Override
    public EventJournal as(Table<?> alias) {
        return new EventJournal(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EventJournal rename(String name) {
        return new EventJournal(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventJournal rename(Name name) {
        return new EventJournal(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventJournal rename(Table<?> name) {
        return new EventJournal(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EventJournal where(Condition condition) {
        return new EventJournal(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EventJournal where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EventJournal where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EventJournal where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EventJournal where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EventJournal where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EventJournal where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EventJournal where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EventJournal whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EventJournal whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
